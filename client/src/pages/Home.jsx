import React from 'react'
import { useState } from 'react'
import { useEffect } from 'react'

import Card from '../components/Card.jsx'
import FormField from '../components/FormField.jsx'
import Loader from '../components/Loader.jsx'

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return data.map((post) => <Card key={post._id} {...post} />)
    }

    return (
        <h2> {title}  </h2>
    )
}

const Home = () => {
    const [loading, setLoading] = useState(false)
    
    const [allPosts, setAllPosts] = useState(null)

    const [searchText, setSearchText] = useState('')

    const [searchedResults, setSearchedResults] = useState(null)
    const [searchTimeout, setSearchTimeout] = useState(null)


    useEffect(() => {
        const fetchPosts = async () => {
            setLoading(true)
            try {
                const response = await fetch('https://localhost:8080/api/v1/post', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })

                if (response.ok) {
                    const result = await response.json()
                    setAllPosts(result.data.reverse())
                }

            } catch (error) {
                alert(error)
            }
            finally {
                setLoading(false)
            }
        }
        fetchPosts()

    }, [])

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout)
        setSearchText(e.target.value)

        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter((item) => item.name.toLowerCase().inCludes(searchText.toLowerCase()) || item.prompt.toLowerCase().inCludes(searchText.toLowerCase()));

                setsearchResult(searchResult)

            }, 500)
        )


    }
    return (
        <section >
            <div>
                <h1>The community Showcase</h1>
                <p>Browse through a collection of imaginative and visually stunning generated by Dream-Ai</p>
            </div>
            <div>
                <FormField 
                LableName="Search posts"
                type="text"
                name="text"
                placeholder="Search posts"
                value={searchText}
                handleChange={handleSearchChange}
                />
            </div>

            <div>
                {loading ? (
                    <div>
                        <Loader />
                    </div>
                ) : (
                    <>
                        {searchText && (
                            <h2>
                                Showing results for  <span>{searchText}</span>
                            </h2>
                        )}
                        <div>
                            {searchText ? (
                                <RenderCards
                                    data={searchedResults}
                                    title="No search results found"
                                />
                            ) : (
                                <RenderCards
                                    data={allPosts}
                                    title="No posts found"
                                />
                            )}

                        </div>
                    </>
                )}


            </div>
        </section>
    )
}

export default Home
